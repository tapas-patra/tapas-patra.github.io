// Initialize the Supabase client
let supabaseClient = null;

// Initialize API connections
async function initializeConnections() {
    try {
        // Check if Supabase is available
        if (typeof supabase === 'undefined') {
            throw new Error('Supabase client is not loaded');
        }
        
        // Initialize Supabase client
        supabaseClient = supabase.createClient(
            CONFIG.SUPABASE_URL,
            CONFIG.SUPABASE_ANON_KEY
        );
        
        // Verify the connection works
        const { data, error } = await supabaseClient.from('documents').select('id').limit(1);
        
        if (error) {
            throw new Error(`Supabase connection error: ${error.message}`);
        }
        
        return true;
    } catch (error) {
        console.error('Failed to initialize connections:', error);
        return false;
    }
}

// Generate embeddings using Mistral
async function generateEmbedding(text) {
    try {
        const response = await fetch('https://api.mistral.ai/v1/embeddings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${CONFIG.MISTRAL_API_KEY}`
            },
            body: JSON.stringify({
                model: CONFIG.MISTRAL_EMBEDDING_MODEL,
                input: text
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Mistral API Error: ${errorData.error?.message || response.statusText}`);
        }
        
        const data = await response.json();
        return data.data[0].embedding;
    } catch (error) {
        console.error('Error generating embedding:', error);
        throw error;
    }
}

// Fetch similar documents from Supabase
async function getSimilarDocuments(embedding) {
    try {
        const { data, error } = await supabaseClient.rpc('match_documents', {
            query_embedding: embedding,
            match_threshold: CONFIG.SIMILARITY_THRESHOLD,
            match_count: CONFIG.MAX_DOCUMENTS
        });
        
        if (error) {
            throw error;
        }
        
        return data || [];
    } catch (error) {
        console.error('Error fetching similar documents:', error);
        throw error;
    }
}

// Generate chat completion with Mistral AI
async function generateChatCompletion(messages) {
    try {
        const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${CONFIG.MISTRAL_API_KEY}`
            },
            body: JSON.stringify({
                model: CONFIG.MISTRAL_COMPLETION_MODEL,
                messages: messages
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Mistral API Error: ${errorData.error?.message || response.statusText}`);
        }
        
        const data = await response.json();
        return data.choices[0].message.content;
    } catch (error) {
        console.error('Error generating chat completion:', error);
        throw error;
    }
}

// RAG response generation
async function generateRAGResponse(userQuery) {
    try {
        // Generate embedding for the query
        const queryEmbedding = await generateEmbedding(userQuery);
        
        // Retrieve relevant documents
        const relevantDocs = await getSimilarDocuments(queryEmbedding);
        
        // Prepare context from retrieved documents
        let context = "";
        if (relevantDocs && relevantDocs.length > 0) {
            context = relevantDocs.map(doc => doc.content).join("\n\n");
        } else {
            context = "No relevant information found.";
        }
        
        // Generate a response using the context and query
        const messages = [
            {
                role: "system",
                content: CONFIG.SYSTEM_PROMPT
            },
            {
                role: "user",
                content: `Here is information about the portfolio owner:\n\n${context}\n\nBased only on this information, please answer the following question: ${userQuery}`
            }
        ];
        
        const response = await generateChatCompletion(messages);
        return response;
    } catch (error) {
        console.error("Error in RAG process:", error);
        throw error;
    }
}
