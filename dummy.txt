// lib/supabase.js
const { createClient } = require('@supabase/supabase-js');
const CONFIG = require('./config');

// Create Supabase client
const supabase = createClient(
  CONFIG.SUPABASE_URL,
  CONFIG.SUPABASE_ANON_KEY
);

// Verify connection and retry mechanism
async function verifySupabaseConnection() {
  let attempts = 0;
  const maxAttempts = 3;
  
  while (attempts < maxAttempts) {
    try {
      const { data, error } = await supabase.from('documents').select('id').limit(1);
      
      if (error) {
        throw error;
      }
      
      return true;
    } catch (error) {
      attempts++;
      console.error(`Supabase connection attempt ${attempts} failed:`, error);
      
      if (attempts >= maxAttempts) {
        throw new Error('Failed to connect to Supabase after multiple attempts');
      }
      
      // Exponential backoff
      await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
    }
  }
}

// Get similar documents using vector search
async function getSimilarDocuments(embedding, threshold, limit) {
  try {
    const { data, error } = await supabase.rpc('match_documents', {
      query_embedding: embedding,
      match_threshold: threshold || CONFIG.SIMILARITY_THRESHOLD,
      match_count: limit || CONFIG.MAX_DOCUMENTS
    });

    if (error) {
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('Error fetching similar documents:', error);
    throw error;
  }
}

// Get documents by keyword search
async function getDocumentsByKeyword(keyword, limit = 3) {
  try {
    const { data, error } = await supabase
      .from('documents')
      .select('id, content, metadata')
      .ilike('content', `%${keyword}%`)
      .limit(limit);

    if (error) {
      throw error;
    }

    // Add a similarity score for ranking
    return (data || []).map(doc => ({
      ...doc,
      similarity: 0.6  // Default similarity for keyword results
    }));
  } catch (error) {
    console.error(`Error in keyword search for "${keyword}":`, error);
    return []; // Return empty array instead of failing
  }
}

// Try hybrid search if available
async function hybridSearch(queryText, queryEmbedding, threshold, limit) {
  try {
    const { data, error } = await supabase.rpc('hybrid_search', {
      query_text: queryText,
      query_embedding: queryEmbedding,
      match_threshold: threshold || CONFIG.SIMILARITY_THRESHOLD,
      match_count: limit || CONFIG.MAX_DOCUMENTS
    });

    if (error) {
      // If RPC is not available, just return null - we'll fall back to regular search
      return null;
    }

    return data || [];
  } catch (error) {
    console.log('Hybrid search not available, falling back to vector search');
    return null;
  }
}

module.exports = {
  supabase,
  verifySupabaseConnection,
  getSimilarDocuments,
  getDocumentsByKeyword,
  hybridSearch
};
