<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio Data Loader</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        h1 {
            color: #4a55a2;
        }
        textarea {
            width: 100%;
            height: 300px;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: monospace;
        }
        button {
            background-color: #4a55a2;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #3a4482;
        }
        .status {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
        }
        .success {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        .error {
            background-color: #ffebee;
            color: #c62828;
        }
        .progress {
            background-color: #e3f2fd;
            color: #1565c0;
        }
        .warning {
            background-color: #fff8e1;
            color: #f57f17;
        }
        #console-log {
            margin-top: 20px;
            padding: 10px;
            background: #f5f5f5;
            border: 1px solid #ddd;
            height: 200px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 12px;
        }
        .log-entry {
            margin-bottom: 5px;
            padding: 2px 5px;
        }
        .log-info {
            color: #0277bd;
        }
        .log-success {
            color: #2e7d32;
        }
        .log-error {
            color: #c62828;
        }
        .log-warning {
            color: #f57f17;
        }
        .batch-size-container {
            margin-bottom: 15px;
        }
        .settings-container {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .setting-item {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>Portfolio Data Loader</h1>
    <p>Use this tool to load your portfolio data into Supabase. Format your data as shown in the example below.</p>
    
    <h2>Instructions:</h2>
    <ol>
        <li>Enter your Supabase URL and Anon Key below.</li>
        <li>Paste your portfolio data in JSON format in the textarea.</li>
        <li>Adjust the rate limit and chunking settings to optimize loading.</li>
        <li>Click "Load Data" to upload and process your data.</li>
    </ol>
    
    <div>
        <label for="supabase-url">Supabase URL:</label>
        <input type="text" id="supabase-url" placeholder="https://your-project.supabase.co" style="width: 100%; padding: 8px; margin-bottom: 10px;">
    </div>
    
    <div>
        <label for="supabase-key">Supabase Anon Key:</label>
        <input type="text" id="supabase-key" placeholder="your-anon-key" style="width: 100%; padding: 8px; margin-bottom: 10px;">
    </div>
    
    <div>
        <label for="mistral-key">Mistral API Key:</label>
        <input type="text" id="mistral-key" placeholder="your-mistral-api-key" style="width: 100%; padding: 8px; margin-bottom: 10px;">
    </div>
    
    <div class="settings-container">
        <h3>Rate Limit Settings</h3>
        <div class="setting-item">
            <label for="batch-size">Batch Size:</label>
            <input type="number" id="batch-size" value="3" min="1" max="10" style="width: 60px;">
            <span style="font-size: 0.9em; color: #666;">(Number of documents to process at once)</span>
        </div>
        
        <div class="setting-item">
            <label for="batch-delay">Delay Between Batches (ms):</label>
            <input type="number" id="batch-delay" value="5000" min="1000" step="1000" style="width: 80px;">
            <span style="font-size: 0.9em; color: #666;">(Milliseconds to wait between batches)</span>
        </div>
        
        <div class="setting-item">
            <label for="max-retries">Max Retries:</label>
            <input type="number" id="max-retries" value="5" min="1" max="10" style="width: 60px;">
            <span style="font-size: 0.9em; color: #666;">(Max attempts on rate limit errors)</span>
        </div>
        
        <h3>Document Chunking</h3>
        <div class="setting-item">
            <label for="chunk-size">Chunk Size (characters):</label>
            <input type="number" id="chunk-size" value="1000" min="500" step="100" style="width: 80px;">
            <span style="font-size: 0.9em; color: #666;">(Split long documents into chunks of this size)</span>
        </div>
        
        <div class="setting-item">
            <label for="chunk-overlap">Chunk Overlap (characters):</label>
            <input type="number" id="chunk-overlap" value="200" min="0" step="50" style="width: 80px;">
            <span style="font-size: 0.9em; color: #666;">(Overlap between chunks to maintain context)</span>
        </div>
        
        <div class="setting-item">
            <input type="checkbox" id="enable-chunking" checked>
            <label for="enable-chunking">Enable Document Chunking</label>
            <span style="font-size: 0.9em; color: #666;">(Split long documents for better retrieval)</span>
        </div>
    </div>
    
    <h3>Portfolio Data (JSON format):</h3>
    <textarea id="portfolio-data" placeholder='{
  "documents": [
    {
      "content": "I am a full-stack developer with 5 years of experience in React, Node.js, and Python.",
      "metadata": { "type": "skills", "category": "development" }
    },
    {
      "content": "Project: E-commerce Platform. Built with React, Redux, Node.js and MongoDB. Features include user authentication, product search, cart management, and payment processing with Stripe.",
      "metadata": { "type": "project", "category": "web development" }
    }
  ]
}'></textarea>
    
    <button id="load-button">Load Data</button>
    
    <div id="status-container"></div>
    
    <h3>Console Log:</h3>
    <div id="console-log"></div>
    
    <!-- Import Supabase JS -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    
    <script>
        // DOM Elements
        const supabaseUrlInput = document.getElementById('supabase-url');
        const supabaseKeyInput = document.getElementById('supabase-key');
        const mistralKeyInput = document.getElementById('mistral-key');
        const portfolioDataInput = document.getElementById('portfolio-data');
        const loadButton = document.getElementById('load-button');
        const statusContainer = document.getElementById('status-container');
        const consoleLogElement = document.getElementById('console-log');
        const batchSizeInput = document.getElementById('batch-size');
        const batchDelayInput = document.getElementById('batch-delay');
        const maxRetriesInput = document.getElementById('max-retries');
        const chunkSizeInput = document.getElementById('chunk-size');
        const chunkOverlapInput = document.getElementById('chunk-overlap');
        const enableChunkingInput = document.getElementById('enable-chunking');
        
        // Custom logging function
        function logToConsole(message, type = 'info') {
            console.log(message); // Also log to browser console
            
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry log-${type}`;
            logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
            consoleLogElement.appendChild(logEntry);
            consoleLogElement.scrollTop = consoleLogElement.scrollHeight;
        }
        
        // Event Listeners
        loadButton.addEventListener('click', processData);
        
        // Check if Supabase is available
        document.addEventListener('DOMContentLoaded', function() {
            if (typeof supabase !== 'undefined') {
                logToConsole('✓ Supabase library loaded successfully.', 'success');
            } else {
                logToConsole('✗ Supabase library not found! Check the script import.', 'error');
            }
        });
        
        // Split document into chunks
        function chunkDocument(text, maxChunkSize = 1000, overlap = 200) {
            if (text.length <= maxChunkSize) {
                return [text]; // No need to chunk
            }
            
            const chunks = [];
            let startIndex = 0;
            
            while (startIndex < text.length) {
                // Find a good breaking point (end of sentence or paragraph)
                let endIndex = Math.min(startIndex + maxChunkSize, text.length);
                
                // Try to find sentence endings (., !, ?)
                if (endIndex < text.length) {
                    const possibleBreakPoints = [
                        text.lastIndexOf('. ', endIndex), 
                        text.lastIndexOf('! ', endIndex),
                        text.lastIndexOf('? ', endIndex),
                        text.lastIndexOf('\n', endIndex)
                    ];
                    
                    // Find the closest breaking point
                    const breakPoint = Math.max(...possibleBreakPoints);
                    
                    if (breakPoint > startIndex) {
                        endIndex = breakPoint + 1; // Include the period
                    }
                }
                
                // Add the chunk
                chunks.push(text.substring(startIndex, endIndex));
                
                // Move to next chunk with overlap
                startIndex = endIndex - overlap;
                
                // Ensure we're not stuck in a loop for very small chunks
                if (startIndex <= 0 || endIndex === text.length) {
                    break;
                }
            }
            
            return chunks;
        }
        
        // Process data in batches with rate limit handling
        async function processData() {
            try {
                // Disable button to prevent multiple clicks
                loadButton.disabled = true;
                
                logToConsole('Starting data processing...');
                
                // Validate inputs
                const supabaseUrl = supabaseUrlInput.value.trim();
                const supabaseKey = supabaseKeyInput.value.trim();
                const mistralKey = mistralKeyInput.value.trim();
                const dataText = portfolioDataInput.value.trim();
                const batchSize = parseInt(batchSizeInput.value) || 3;
                const batchDelay = parseInt(batchDelayInput.value) || 5000;
                const maxRetries = parseInt(maxRetriesInput.value) || 5;
                const chunkSize = parseInt(chunkSizeInput.value) || 1000;
                const chunkOverlap = parseInt(chunkOverlapInput.value) || 200;
                const enableChunking = enableChunkingInput.checked;
                
                if (!supabaseUrl || !supabaseKey || !mistralKey || !dataText) {
                    showStatus('Please fill in all fields.', 'error');
                    logToConsole('Missing required fields.', 'error');
                    loadButton.disabled = false;
                    return;
                }
                
                logToConsole(`Supabase URL: ${supabaseUrl.substring(0, 15)}...`);
                logToConsole(`Batch settings: Size=${batchSize}, Delay=${batchDelay}ms, Max Retries=${maxRetries}`);
                logToConsole(`Chunking settings: ${enableChunking ? 'Enabled' : 'Disabled'}, Size=${chunkSize}, Overlap=${chunkOverlap}`);
                
                // Verify Supabase is available
                if (typeof supabase === 'undefined') {
                    throw new Error('Supabase library is not loaded properly.');
                }
                
                logToConsole('Parsing JSON data...');
                
                // Parse JSON data
                let data;
                try {
                    data = JSON.parse(dataText);
                    if (!data.documents || !Array.isArray(data.documents)) {
                        throw new Error('Invalid format. Data should have a "documents" array.');
                    }
                    logToConsole(`Found ${data.documents.length} documents in JSON.`, 'success');
                } catch (e) {
                    showStatus(`Invalid JSON format: ${e.message}`, 'error');
                    logToConsole(`JSON parse error: ${e.message}`, 'error');
                    loadButton.disabled = false;
                    return;
                }
                
                // Initialize Supabase Client
                logToConsole('Initializing Supabase client...');
                const supabaseClient = supabase.createClient(supabaseUrl, supabaseKey);
                logToConsole('Supabase client initialized successfully.', 'success');
                
                // Process documents - prepare array of all chunks
                const documents = data.documents;
                let allChunks = [];
                let totalChunks = 0;
                
                // Preprocess and count chunks
                for (let i = 0; i < documents.length; i++) {
                    const doc = documents[i];
                    
                    if (enableChunking && doc.content.length > chunkSize) {
                        const chunks = chunkDocument(doc.content, chunkSize, chunkOverlap);
                        logToConsole(`Document ${i+1} split into ${chunks.length} chunks.`);
                        
                        chunks.forEach((chunk, chunkIndex) => {
                            allChunks.push({
                                original: doc,
                                chunk: chunk,
                                chunkIndex: chunkIndex,
                                totalChunks: chunks.length,
                                originalIndex: i
                            });
                        });
                        
                        totalChunks += chunks.length;
                    } else {
                        allChunks.push({
                            original: doc,
                            chunk: doc.content,
                            chunkIndex: 0,
                            totalChunks: 1,
                            originalIndex: i
                        });
                        totalChunks++;
                    }
                }
                
                logToConsole(`Preprocessing complete. ${documents.length} documents expanded into ${totalChunks} chunks for processing.`);
                
                let processedCount = 0;
                let failedCount = 0;
                
                showStatus(`Processing ${totalChunks} chunks in batches of ${batchSize}...`, 'progress');
                
                // Process in batches
                for (let i = 0; i < allChunks.length; i += batchSize) {
                    const batch = allChunks.slice(i, i + batchSize);
                    logToConsole(`Starting batch ${Math.floor(i/batchSize) + 1} of ${Math.ceil(allChunks.length/batchSize)}...`);
                    
                    // Process each item in the current batch
                    const batchPromises = batch.map(async (item, index) => {
                        const batchIndex = i + index;
                        try {
                            // Process this individual chunk
                            await processChunk(
                                item.chunk, 
                                {
                                    ...item.original.metadata,
                                    chunk_index: item.chunkIndex,
                                    total_chunks: item.totalChunks,
                                    original_document_index: item.originalIndex
                                },
                                batchIndex,
                                totalChunks,
                                supabaseClient,
                                mistralKey,
                                maxRetries
                            );
                            processedCount++;
                            return true;
                        } catch (error) {
                            failedCount++;
                            return false;
                        }
                    });
                    
                    // Wait for all chunks in this batch to be processed
                    await Promise.all(batchPromises);
                    
                    // If we have more batches to process, wait before continuing
                    if (i + batchSize < allChunks.length) {
                        const nextBatchNumber = Math.floor((i+batchSize)/batchSize) + 1;
                        logToConsole(`Batch complete. Waiting ${batchDelay/1000} seconds before starting batch ${nextBatchNumber}...`, 'warning');
                        showStatus(`Processed ${processedCount}/${totalChunks} chunks. Waiting for rate limit...`, 'warning');
                        await new Promise(resolve => setTimeout(resolve, batchDelay));
                    }
                }
                
                // Final status update
                const statusMessage = `Processing complete. Successfully processed ${processedCount} chunks. Failed: ${failedCount}.`;
                if (failedCount > 0) {
                    showStatus(statusMessage, 'warning');
                    logToConsole(statusMessage, 'warning');
                } else {
                    showStatus(statusMessage, 'success');
                    logToConsole(statusMessage, 'success');
                }
                
            } catch (error) {
                showStatus(`Error: ${error.message}`, 'error');
                logToConsole(`Fatal error: ${error.message}`, 'error');
                console.error('Detailed error:', error);
            } finally {
                loadButton.disabled = false;
            }
        }
        
        // Process a single chunk with retry logic
        async function processChunk(content, metadata, index, total, supabaseClient, mistralKey, maxRetries) {
            logToConsole(`Processing chunk ${index+1}/${total}: "${content.substring(0, 30)}..."`);
            
            // Insert document chunk into Supabase
            logToConsole(`Inserting chunk ${index+1} into Supabase...`);
            const { data: documentData, error: documentError } = await supabaseClient
                .from('documents')
                .insert({
                    content: content,
                    metadata: metadata
                })
                .select()
                .single();
            
            if (documentError) {
                logToConsole(`Database error for chunk ${index+1}: ${documentError.message}`, 'error');
                throw new Error(`Failed to insert document: ${documentError.message}`);
            }
            
            logToConsole(`Chunk ${index+1} inserted with ID: ${documentData.id}`, 'success');
            
            // Generate embedding with retry logic
            let embedding;
            let retryCount = 0;
            let success = false;
            let lastError;
            
            while (!success && retryCount <= maxRetries) {
                try {
                    // If this is a retry, log and wait with exponential backoff
                    if (retryCount > 0) {
                        const waitTime = Math.pow(2, retryCount) * 1000; // Exponential backoff: 2s, 4s, 8s, 16s, 32s
                        logToConsole(`Retry ${retryCount}/${maxRetries} for chunk ${index+1} after ${waitTime/1000}s wait...`, 'warning');
                        await new Promise(resolve => setTimeout(resolve, waitTime));
                    }
                    
                    logToConsole(`Generating embedding for chunk ${index+1}...`);
                    embedding = await generateMistralEmbedding(content, mistralKey);
                    success = true;
                    
                } catch (error) {
                    lastError = error;
                    retryCount++;
                    
                    // If we've reached max retries, log failure and throw
                    if (retryCount > maxRetries) {
                        logToConsole(`All ${maxRetries} retries failed for chunk ${index+1}. Giving up.`, 'error');
                        throw error;
                    }
                    
                    // Log the error and prepare to retry
                    const isRateLimitError = error.message.includes('429') || error.message.toLowerCase().includes('rate limit');
                    if (isRateLimitError) {
                        logToConsole(`Rate limit exceeded for chunk ${index+1}. Will retry.`, 'warning');
                    } else {
                        logToConsole(`Error generating embedding for chunk ${index+1}: ${error.message}. Will retry.`, 'error');
                    }
                }
            }
            
            if (!success) {
                throw lastError;
            }
            
            logToConsole(`Embedding generated successfully for chunk ${index+1}.`, 'success');
            
            // Insert embedding
            logToConsole(`Storing embedding for chunk ${index+1}...`);
            const { error: embeddingError } = await supabaseClient
                .from('embeddings')
                .insert({
                    document_id: documentData.id,
                    embedding: embedding
                });
            
            if (embeddingError) {
                logToConsole(`Error storing embedding for chunk ${index+1}: ${embeddingError.message}`, 'error');
                throw new Error(`Failed to store embedding: ${embeddingError.message}`);
            }
            
            logToConsole(`Chunk ${index+1} fully processed and stored.`, 'success');
        }
        
        // Generate embedding with Mistral API
        async function generateMistralEmbedding(text, apiKey) {
            try {
                const response = await fetch('https://api.mistral.ai/v1/embeddings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`
                    },
                    body: JSON.stringify({
                        model: "mistral-embed",
                        input: text
                    })
                });
                
                if (response.status === 429) {
                    throw new Error('Rate limit exceeded (429). Please try again later.');
                }
                
                if (!response.ok) {
                    const errorText = await response.text();
                    let errorMessage = `Mistral API returned status: ${response.status}`;
                    
                    try {
                        const errorData = JSON.parse(errorText);
                        errorMessage = `Mistral API Error (${response.status}): ${errorData.error?.message || response.statusText}`;
                    } catch (e) {
                        // If parsing fails, use the status code
                        errorMessage = `Mistral API Error: Status ${response.status}`;
                    }
                    
                    throw new Error(errorMessage);
                }
                
                const data = await response.json();
                return data.data[0].embedding;
            } catch (error) {
                throw error;
            }
        }
        
        function showStatus(message, type) {
            statusContainer.innerHTML = `<div class="status ${type}">${message}</div>`;
        }
    </script>
</body>
</html>
