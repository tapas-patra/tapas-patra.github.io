-- Enable the pgvector extension
CREATE EXTENSION IF NOT EXISTS vector;

-- Create a table for documents
CREATE TABLE IF NOT EXISTS documents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content TEXT NOT NULL,
  metadata JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL
);

-- Create a table for embeddings
CREATE TABLE IF NOT EXISTS embeddings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  document_id BIGINT REFERENCES documents(id) ON DELETE CASCADE,
  embedding VECTOR(1024), -- Dimension for Mistral embeddings
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()) NOT NULL
);

-- Create an index for faster similarity searches
CREATE INDEX IF NOT EXISTS embeddings_embedding_idx ON embeddings 
USING ivfflat (embedding vector_cosine_ops);

-- Create a function for similarity search
CREATE OR REPLACE FUNCTION match_documents(
  query_embedding VECTOR(1024),
  match_threshold FLOAT,
  match_count INT
)
RETURNS TABLE (
  id BIGINT,
  content TEXT,
  metadata JSONB,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    documents.id,
    documents.content,
    documents.metadata,
    1 - (embeddings.embedding <=> query_embedding) AS similarity
  FROM embeddings
  JOIN documents ON embeddings.document_id = documents.id
  WHERE 1 - (embeddings.embedding <=> query_embedding) > match_threshold
  ORDER BY similarity DESC
  LIMIT match_count;
END;
$$;

-- Create a function for hybrid search (keyword + vector)
CREATE OR REPLACE FUNCTION hybrid_search(
  query_text TEXT,
  query_embedding VECTOR(1024),
  match_threshold FLOAT,
  match_count INT
)
RETURNS TABLE (
  id BIGINT,
  content TEXT,
  metadata JSONB,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  -- Get results based on embedding similarity
  SELECT 
    documents.id,
    documents.content,
    documents.metadata,
    1 - (embeddings.embedding <=> query_embedding) AS similarity
  FROM embeddings
  JOIN documents ON embeddings.document_id = documents.id
  WHERE 1 - (embeddings.embedding <=> query_embedding) > match_threshold
  
  UNION ALL
  
  -- Get results based on text search
  SELECT
    documents.id,
    documents.content,
    documents.metadata,
    0.6 AS similarity -- Set a lower similarity score for text matches
  FROM documents
  WHERE 
    documents.content ILIKE '%' || query_text || '%'
    -- Exclude documents that likely matched in the embedding query
    AND documents.id NOT IN (
      SELECT doc_id FROM (
        SELECT 
          documents.id as doc_id,
          1 - (embeddings.embedding <=> query_embedding) AS similarity
        FROM embeddings
        JOIN documents ON embeddings.document_id = documents.id
        WHERE 1 - (embeddings.embedding <=> query_embedding) > match_threshold
        LIMIT match_count
      ) AS embedding_matches
    )
  LIMIT match_count
  
  -- Sort by similarity score
  ORDER BY similarity DESC
  LIMIT match_count;
END;
$$;
