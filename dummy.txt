-- Enable the pgvector extension (required for vector embeddings)
CREATE EXTENSION IF NOT EXISTS vector;

-- Create a table for documents
CREATE TABLE IF NOT EXISTS documents (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  content TEXT NOT NULL,
  metadata JSONB DEFAULT '{}'::jsonb,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create a table for embeddings
CREATE TABLE IF NOT EXISTS embeddings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  document_id BIGINT REFERENCES documents(id) ON DELETE CASCADE,
  embedding VECTOR(1024), -- Dimension for Mistral embeddings
  created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create an index for faster similarity searches
CREATE INDEX IF NOT EXISTS embeddings_vector_idx ON embeddings USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- Drop the existing functions first
DROP FUNCTION IF EXISTS match_documents(vector(1024), float, int);
DROP FUNCTION IF EXISTS hybrid_search(text, vector(1024), float, int);

-- Create a function for similarity search
CREATE FUNCTION match_documents(
  query_embedding VECTOR(1024),
  match_threshold FLOAT,
  match_count INT
)
RETURNS TABLE (
  id BIGINT,
  content TEXT,
  metadata JSONB,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    documents.id,
    documents.content,
    documents.metadata,
    1 - (embeddings.embedding <=> query_embedding) AS similarity
  FROM embeddings
  JOIN documents ON embeddings.document_id = documents.id
  WHERE 1 - (embeddings.embedding <=> query_embedding) > match_threshold
  ORDER BY similarity DESC
  LIMIT match_count;
END;
$$;

-- Create a function for hybrid search (keyword + vector)
CREATE FUNCTION hybrid_search(
  query_text TEXT,
  query_embedding VECTOR(1024),
  match_threshold FLOAT,
  match_count INT
)
RETURNS TABLE (
  id BIGINT,
  content TEXT,
  metadata JSONB,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  (
    -- Get results based on embedding similarity
    SELECT 
      documents.id,
      documents.content,
      documents.metadata,
      1 - (embeddings.embedding <=> query_embedding) AS similarity
    FROM embeddings
    JOIN documents ON embeddings.document_id = documents.id
    WHERE 1 - (embeddings.embedding <=> query_embedding) > match_threshold
    
    UNION ALL
    
    -- Get results based on text search
    SELECT
      documents.id,
      documents.content,
      documents.metadata,
      0.6 AS similarity -- Set a lower similarity score for text matches
    FROM documents
    WHERE 
      documents.content ILIKE '%' || query_text || '%'
      -- Exclude documents that likely matched in the embedding query
      AND documents.id NOT IN (
        SELECT 
          documents.id
        FROM embeddings
        JOIN documents ON embeddings.document_id = documents.id
        WHERE 1 - (embeddings.embedding <=> query_embedding) > match_threshold
        LIMIT match_count
      )
  )
  -- Order and limit the combined results
  ORDER BY similarity DESC
  LIMIT match_count;
END;
$$;

-- Grant necessary permissions (adjust if using Row Level Security)
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE embeddings ENABLE ROW LEVEL SECURITY;

-- Drop existing policies first to avoid duplicates
DROP POLICY IF EXISTS "Allow all operations for authenticated users" ON documents;
DROP POLICY IF EXISTS "Allow all operations for authenticated users" ON embeddings;
DROP POLICY IF EXISTS "Allow all operations for anon users" ON documents;
DROP POLICY IF EXISTS "Allow all operations for anon users" ON embeddings;

-- Create policy to allow all operations for authenticated users
CREATE POLICY "Allow all operations for authenticated users" 
ON documents FOR ALL 
TO authenticated 
USING (true) 
WITH CHECK (true);

CREATE POLICY "Allow all operations for authenticated users" 
ON embeddings FOR ALL 
TO authenticated 
USING (true) 
WITH CHECK (true);

-- Create policy to allow all operations for anon users (for demo purposes)
CREATE POLICY "Allow all operations for anon users" 
ON documents FOR ALL 
TO anon 
USING (true) 
WITH CHECK (true);

CREATE POLICY "Allow all operations for anon users" 
ON embeddings FOR ALL 
TO anon 
USING (true) 
WITH CHECK (true);

-- For service roles and security
BEGIN;
  -- Enable Service Role to see the tables
  GRANT USAGE ON SCHEMA public TO service_role;
  GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
  GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;
  GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO service_role;
  
  -- Enable authenticated users to use the tables and functions
  GRANT USAGE ON SCHEMA public TO authenticated;
  GRANT ALL ON TABLE documents TO authenticated;
  GRANT ALL ON TABLE embeddings TO authenticated;
  GRANT ALL ON SEQUENCE documents_id_seq TO authenticated;
  GRANT ALL ON SEQUENCE embeddings_id_seq TO authenticated;
  GRANT EXECUTE ON FUNCTION match_documents TO authenticated;
  GRANT EXECUTE ON FUNCTION hybrid_search TO authenticated;
  
  -- Enable anonymous users to use the tables and functions (for demo)
  GRANT USAGE ON SCHEMA public TO anon;
  GRANT ALL ON TABLE documents TO anon;
  GRANT ALL ON TABLE embeddings TO anon;
  GRANT ALL ON SEQUENCE documents_id_seq TO anon;
  GRANT ALL ON SEQUENCE embeddings_id_seq TO anon;
  GRANT EXECUTE ON FUNCTION match_documents TO anon;
  GRANT EXECUTE ON FUNCTION hybrid_search TO anon;
COMMIT;
