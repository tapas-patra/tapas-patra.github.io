<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio Data Loader</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        h1 {
            color: #4a55a2;
        }
        textarea {
            width: 100%;
            height: 300px;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: monospace;
        }
        button {
            background-color: #4a55a2;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #3a4482;
        }
        .status {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
        }
        .success {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        .error {
            background-color: #ffebee;
            color: #c62828;
        }
        .progress {
            background-color: #e3f2fd;
            color: #1565c0;
        }
    </style>
    <!-- Supabase Client Library -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/umd/supabase.min.js"></script>
</head>
<body>
    <h1>Portfolio Data Loader</h1>
    <p>Use this tool to load your portfolio data into Supabase. Format your data as shown in the example below.</p>
    
    <h2>Instructions:</h2>
    <ol>
        <li>Enter your Supabase URL and Anon Key below.</li>
        <li>Paste your portfolio data in JSON format in the textarea.</li>
        <li>Click "Load Data" to upload and process your data.</li>
    </ol>
    
    <div>
        <label for="supabase-url">Supabase URL:</label>
        <input type="text" id="supabase-url" placeholder="https://your-project.supabase.co" style="width: 100%; padding: 8px; margin-bottom: 10px;">
    </div>
    
    <div>
        <label for="supabase-key">Supabase Anon Key:</label>
        <input type="text" id="supabase-key" placeholder="your-anon-key" style="width: 100%; padding: 8px; margin-bottom: 10px;">
    </div>
    
    <div>
        <label for="mistral-key">Mistral API Key:</label>
        <input type="text" id="mistral-key" placeholder="your-mistral-api-key" style="width: 100%; padding: 8px; margin-bottom: 10px;">
    </div>
    
    <h3>Portfolio Data (JSON format):</h3>
    <textarea id="portfolio-data" placeholder='{
  "documents": [
    {
      "content": "I am a full-stack developer with 5 years of experience in React, Node.js, and Python.",
      "metadata": { "type": "skills", "category": "development" }
    },
    {
      "content": "Project: E-commerce Platform. Built with React, Redux, Node.js and MongoDB. Features include user authentication, product search, cart management, and payment processing with Stripe.",
      "metadata": { "type": "project", "category": "web development" }
    }
  ]
}'></textarea>
    
    <button id="load-button">Load Data</button>
    
    <div id="status-container"></div>
    
    <script>
        // DOM Elements
        const supabaseUrlInput = document.getElementById('supabase-url');
        const supabaseKeyInput = document.getElementById('supabase-key');
        const mistralKeyInput = document.getElementById('mistral-key');
        const portfolioDataInput = document.getElementById('portfolio-data');
        const loadButton = document.getElementById('load-button');
        const statusContainer = document.getElementById('status-container');
        
        // Event Listeners
        loadButton.addEventListener('click', processData);
        
        async function processData() {
            try {
                // Validate inputs
                const supabaseUrl = supabaseUrlInput.value.trim();
                const supabaseKey = supabaseKeyInput.value.trim();
                const mistralKey = mistralKeyInput.value.trim();
                const dataText = portfolioDataInput.value.trim();
                
                if (!supabaseUrl || !supabaseKey || !mistralKey || !dataText) {
                    showStatus('Please fill in all fields.', 'error');
                    return;
                }
                
                // Parse JSON data
                let data;
                try {
                    data = JSON.parse(dataText);
                    if (!data.documents || !Array.isArray(data.documents)) {
                        throw new Error('Invalid format. Data should have a "documents" array.');
                    }
                } catch (e) {
                    showStatus(`Invalid JSON format: ${e.message}`, 'error');
                    return;
                }
                
                // Initialize Supabase - FIX: Use a different variable name
                const supabaseClient = supabase.createClient(supabaseUrl, supabaseKey);
                
                // Process each document
                showStatus(`Processing ${data.documents.length} documents...`, 'progress');
                
                for (let i = 0; i < data.documents.length; i++) {
                    const doc = data.documents[i];
                    
                    // Update status
                    showStatus(`Processing document ${i+1}/${data.documents.length}...`, 'progress');
                    
                    // Insert document
                    const { data: documentData, error: documentError } = await supabaseClient
                        .from('documents')
                        .insert({
                            content: doc.content,
                            metadata: doc.metadata || {}
                        })
                        .select()
                        .single();
                    
                    if (documentError) {
                        showStatus(`Error inserting document ${i+1}: ${documentError.message}`, 'error');
                        continue;
                    }
                    
                    // Generate embedding
                    const embedding = await generateMistralEmbedding(doc.content, mistralKey);
                    
                    // Insert embedding
                    const { error: embeddingError } = await supabaseClient
                        .from('embeddings')
                        .insert({
                            document_id: documentData.id,
                            embedding: embedding
                        });
                    
                    if (embeddingError) {
                        showStatus(`Error inserting embedding for document ${i+1}: ${embeddingError.message}`, 'error');
                        continue;
                    }
                    
                    // Add delay to avoid rate limiting
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
                
                showStatus(`Successfully processed ${data.documents.length} documents!`, 'success');
            } catch (error) {
                showStatus(`Error: ${error.message}`, 'error');
            }
        }
        
        async function generateMistralEmbedding(text, apiKey) {
            const response = await fetch('https://api.mistral.ai/v1/embeddings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: "mistral-embed",
                    input: text
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Mistral API Error: ${errorData.error?.message || response.statusText}`);
            }
            
            const data = await response.json();
            return data.data[0].embedding;
        }
        
        function showStatus(message, type) {
            statusContainer.innerHTML = `<div class="status ${type}">${message}</div>`;
        }
    </script>
</body>
</html>
