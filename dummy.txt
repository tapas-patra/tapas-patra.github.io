// DOM References
const loadingOverlay = document.getElementById('loading-overlay');
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
const clearChatButton = document.getElementById('clear-chat');
const introPanel = document.getElementById('intro-panel');
const suggestionChips = document.querySelectorAll('.suggestion-chip');

// Track initialization state
let isInitialized = false;

// Initialize the application
async function initializeApp() {
    // Show loading overlay
    loadingOverlay.classList.remove('hidden');
    
    try {
        // Initialize API connections
        const success = await initializeConnections();
        
        if (!success) {
            throw new Error('Failed to initialize connections');
        }
        
        // Initialize is complete
        isInitialized = true;
        
        // Hide loading overlay
        loadingOverlay.classList.add('hidden');
        
        // Add welcome message
        setTimeout(() => {
            addBotMessage("Hi there! I'm an AI assistant for this portfolio. I can tell you about my skills, projects, and experience, or answer any general questions you might have. How can I help you today?");
        }, 500);
        
    } catch (error) {
        console.error('Initialization error:', error);
        loadingOverlay.classList.add('hidden');
        
        // Show error message
        addErrorMessage("I'm having trouble connecting to my knowledge base. Please try again later.");
    }
}

// Add event listeners
function setupEventListeners() {
    // Send button click
    sendButton.addEventListener('click', handleUserMessage);
    
    // Enter key in textarea
    userInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleUserMessage();
        }
    });
    
    // Input changes (for enabling/disabling send button)
    userInput.addEventListener('input', () => {
        // Adjust textarea height based on content
        userInput.style.height = 'auto';
        userInput.style.height = `${Math.min(userInput.scrollHeight, 120)}px`;
        
        // Enable/disable send button based on input
        sendButton.disabled = userInput.value.trim() === '';
    });
    
    // Clear chat button
    clearChatButton.addEventListener('click', () => {
        // Clear messages
        chatMessages.innerHTML = '';
        
        // Show intro panel
        introPanel.classList.remove('hidden');
        
        // Clear cache and conversation history
        if (responseCache && typeof responseCache.clear === 'function') {
            responseCache.clear();
        }
        
        if (conversationManager && typeof conversationManager.clear === 'function') {
            conversationManager.clear();
        }
        
        // Add welcome message
        setTimeout(() => {
            addBotMessage("I've cleared our conversation. How can I help you today?");
        }, 300);
    });
    
    // Suggestion chips
    suggestionChips.forEach(chip => {
        chip.addEventListener('click', () => {
            // Hide intro panel
            introPanel.classList.add('hidden');
            
            // Get query from data attribute
            const query = chip.getAttribute('data-query');
            
            // Set input value
            userInput.value = query;
            
            // Trigger input event to adjust height and enable send button
            userInput.dispatchEvent(new Event('input'));
            
            // Send message
            handleUserMessage();
        });
    });
    
    // Rate limit event listener
    document.addEventListener('ratelimit', (event) => {
        const { waitTime, retryCount } = event.detail;
        const seconds = Math.ceil(waitTime / 1000);
        
        // Update the thinking indicator to show rate limit info
        const existingThinking = document.querySelector('.message.thinking');
        
        if (existingThinking) {
            existingThinking.innerHTML = `
                <p class="rate-limit-message">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="12" y1="8" x2="12" y2="12"></line>
                        <line x1="12" y1="16" x2="12.01" y2="16"></line>
                    </svg>
                    Rate limit reached. Waiting ${seconds} seconds before retry ${retryCount}/${CONFIG.RATE_LIMIT.MAX_RETRIES}...
                </p>
            `;
        }
    });
}

// Handle user message
async function handleUserMessage() {
    const message = userInput.value.trim();
    
    // Don't process empty messages
    if (!message) return;
    
    // Don't process if not initialized
    if (!isInitialized) {
        addErrorMessage("I'm still getting ready. Please wait a moment and try again.");
        return;
    }
    
    // Hide intro panel if visible
    introPanel.classList.add('hidden');
    
    // Add user message to chat
    addUserMessage(message);
    
    // Clear input and reset height
    userInput.value = '';
    userInput.style.height = 'auto';
    userInput.focus();
    
    // Disable send button
    sendButton.disabled = true;
    
    // Show thinking indicator
    const thinkingIndicator = addThinkingIndicator();
    
    try {
        // Generate response
        const response = await generateRAGResponse(message);
        
        // Remove thinking indicator
        chatMessages.removeChild(thinkingIndicator);
        
        // Add bot response
        addBotMessage(response);
    } catch (error) {
        // Remove thinking indicator
        chatMessages.removeChild(thinkingIndicator);
        
        // Add error message
        addErrorMessage("I'm having trouble generating a response right now. Please try again later.");
        console.error("Error generating response:", error);
    }
}

// Add user message to chat
function addUserMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.className = 'message message-user';
    
    // Format the message text (replacing URLs, etc)
    messageElement.innerHTML = formatMessageText(message);
    
    // Add to chat and scroll to bottom
    chatMessages.appendChild(messageElement);
    scrollToBottom();
}

// Add bot message to chat
function addBotMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.className = 'message message-bot';
    
    // Process markdown-like formatting
    const formattedMessage = formatMessageText(message);
    
    messageElement.innerHTML = formattedMessage;
    chatMessages.appendChild(messageElement);
    scrollToBottom();
}

// Add error message
function addErrorMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.className = 'message message-bot error';
    messageElement.innerHTML = `<p>⚠️ ${message}</p>`;
    chatMessages.appendChild(messageElement);
    scrollToBottom();
}

// Add thinking indicator
function addThinkingIndicator() {
    const thinkingElement = document.createElement('div');
    thinkingElement.className = 'message message-bot thinking';
    
    const dotsContainer = document.createElement('div');
    dotsContainer.className = 'thinking-dots';
    
    for (let i = 0; i < 3; i++) {
        const dot = document.createElement('div');
        dot.className = 'thinking-dot';
        dotsContainer.appendChild(dot);
    }
    
    thinkingElement.appendChild(dotsContainer);
    chatMessages.appendChild(thinkingElement);
    scrollToBottom();
    
    return thinkingElement;
}

// Format message text (handles code blocks, links, etc.)
function formatMessageText(text) {
    // Replace code blocks with <pre><code> elements
    let formattedText = text.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
    
    // Replace inline code with <code> elements
    formattedText = formattedText.replace(/`([^`]+)`/g, '<code>$1</code>');
    
    // Auto-link URLs
    formattedText = formattedText.replace(
        /(https?:\/\/[^\s]+)/g, 
        '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'
    );
    
    // Replace newlines with <br>
    formattedText = formattedText.replace(/\n/g, '<br>');
    
    return formattedText;
}

// Scroll to bottom of messages
function scrollToBottom() {
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Initialize the app when the page loads
document.addEventListener('DOMContentLoaded', () => {
    setupEventListeners();
    initializeApp();
});
