// Retrieval-Augmented Generation Core Functionality
async function generateRAGResponse(userQuery) {
    try {
        // Step l: Generate embedding for the query
        const queryEmbedding = await generateEmbedding(userQuery);
        
        // Step 2: Retrieve relevant documents
        const relevantDocs = await getSimilarDocuments(queryEmbedding);
        
        // Step 3: Prepare context from retrieved documents
        let context = "";
        if (relevantDocs && relevantDocs.length > 0) {
            context = relevantDocs.map(doc => doc.content).join("\n\n");
        } else {
            context = "No relevant information found.";
        }
        
        // Step 4: Generate a response using the context and query
        const messages = [
            {
                role: "system",
                content: "You are a helpful portfolio assistant. Use the provided information to answer questions about the portfolio owner's skills, projects, and experience. If the information doesn't contain the answer, just say you don't know but are happy to help with something else."
            },
            {
                role: "user",
                content: `Here is information about the portfolio owner:\n\n${context}\n\nBased only on this information, please answer the following question: ${userQuery}`
            }
        ];
        
        const response = await generateChatCompletion(messages);
        return response;
    } catch (error) {
        console.error("Error in RAG process:", error);
        throw error;
    }
}
